import os,re
import porter
z=0
#initializing punctuation marks list and stop words list
punctuation_marks=[',','.','<','>','|',':','(',')','/','_','\\','?','-','!','#','%','^','&','*','_','+','~']
stop_word=open('stop_words.txt',"r").read().split('\n')

# cleaning data by removing punctuation marks
for root, dirs, files in os.walk("./comp.os.ms-windows.misc"):
	for input_file in files:
		output_file='cleaned_data/'+input_file
		input_file='comp.os.ms-windows.misc/'+input_file
		f=open(input_file,"r")
		f_new=open(output_file,"w")
		for characters in f.read():
			if characters not in punctuation_marks:
				f_new.write(characters)
		f.close()
		f_new.close()

# stemming and removal of stop words
documents=[]
unique_words=set()
for root, dirs, files in os.walk("./cleaned_data"):
	for input_file in files:
		output_file=input_file
		input_file='cleaned_data/'+input_file
		documents.append(output_file)
		f=open(input_file,"r")
		f_new=open("stemmed_data/"+output_file,"w")
		for line in f.readlines():
			words=line.split()	
			for word in words:
				word=word.lower()
				if word.isalpha()==False:
					continue
				if word not in stop_word:
					f_new.write(porter.stem(word)+" ")
					unique_words.add(porter.stem(word))
			f_new.write("\n")
		f.close()
		f_new.close()

#creating index list with document frequency and term frequency
document_frequency=dict()
term_frequency=dict()

#initializing term_frequency matrix
for term in unique_words:
	term_frequency[term]=dict()
	for root, dirs, files in os.walk("./stemmed_data"):
		for input_file in files:
			term_frequency[term][input_file]=0

#building term_frequency matrix
for root, dirs, files in os.walk("./stemmed_data"):
	for input_file in files:
		f_new=open("stemmed_data/"+input_file,"r")
		for line in f_new.readlines():
			words=line.split()	
			for word in words:
				word=word.lower()
				if word.isalpha()==False:
					continue
				if word not in stop_word:
					word=porter.stem(word)
					if word in unique_words:
						term_frequency[word][input_file]+=1
		f_new.close()

posting_list=dict()
# building document_frequency
for word in unique_words:
	document_frequency[word]=0
	posting_list[word]=[]
	for input_file in term_frequency[word].keys():
		if term_frequency[word][input_file]>0:
			posting_list[word].append(input_file)
			document_frequency[word]+=1

# example 
#s="read and write"
def resolve(w1=None,w2=None,operator=None,list1=None,list2=None):
	result=[]
	#set of functions for finding and
	if(operator=="and" and list1==None and list2==None and w1!=None and w2!=None):
		for i in posting_list[w1]:
			for j in posting_list[w2]:
				if(i==j):
					result.append(i)
		return result
	if(operator=="and" and list1!=None and list2==None and w1!=None and w2==None):
		for i in posting_list[w1]:
			for j in list1:
				if(i==j):
					result.append(i)
		return result
	if(operator=="and" and list1!=None and list2!=None and w1==None and w2==None):
		for i in list1:
			for j in list2:
				if(i==j):
					result.append(i)
		return result
	
	#set of functions for finding or
	if(operator=="or" and list1==None and list2==None and w1!=None and w2!=None):
		for i in posting_list[w1]:
			result.append(i)
		for j in term_frequency[w2]:
			result.append(j)
		return result
	if(operator=="or" and list1!=None and list2==None and w1!=None and w2==None):
		for i in posting_list[w1]:
			result.append(i)
		for j in list1:
			result.append(j)
		return result
	if(operator=="or" and list1!=None and list2!=None and w1==None and w2==None):
		for i in list1:
			result.append(i)
		for j in list2:
			result.append(j)
		return result
		
	#set of functions for finding not
	if(operator=="not" and w1!=None and list1==None and list2==None and w2==None):
		for i in posting_list:
			flag=0
			for j in documents:
				 if(i==j):
				 	flag=1;
			if(flag==0) result.append(i)
		return result

print(resolve(w1="read",w2="made",operator="and",list1=None,list2=None))
#print(resolve(w1=None,w2=None,operator="and",list1=['1','3'],list2=['1','3','5']))
print(posting_list["read"])
"""
print('Document frequency of term "read":')
print(document_frequency['read'])
print('Term frequency of term "read":')
print (term_frequency['read'])
print('Posting List of term "read":')
print(posting_list['read'])
"""
